<<<<<<< HEAD
---
  env:
    browser: true
    node: true
  globals:
    Uint8Array: true
    DataView: true
    Buffer: true
    TextDecoder: true
  parserOptions:
    ecmaVersion: 6
    ecmaFeatures:
      scriptType: "module"
  extends: "eslint:recommended"
  rules:
    quotes:
      - "error"
      - "single"
    # Some changes for modernizing it/adding in "best practices", as well as code consistency based
    # on existing stylistic choices
    #
    # see https://eslint.org/docs/rules/ for details
    array-bracket-spacing:
      - "error"
      - "never"
    array-callback-return: "error"
    array-element-newline:
      - "error"
      - multiline: true
        minItems: 4
    arrow-parens:
      - "error"
      - "as-needed"
      - requireForBlockBody: true
    arrow-spacing: "error"
    block-spacing: "error"
    brace-style:
      - "error"
      - "1tbs"
      - allowSingleLine: true
    callback-return: "error"
    camelcase:
      - "error"
      - ignoreDestructuring: true
        properties: "never"
    capitalized-comments:
      - "error"
      - "never"
    class-methods-use-this: "error"
    comma-dangle:
      - "error"
      - "never"
    comma-spacing:
      - "error"
      - before: false
        after: true
    complexity: "error"
    computed-property-spacing:
      - "error"
      - "never"
    consistent-return: "error"
    eol-last: "error"
    eqeqeq:
      - "error"
      - "smart"
    func-call-spacing:
      - "error"
      - "never"
    func-names:
      - "error"
      - "never"
    func-style:
      - "error"
      - "declaration"
      - allowArrowFunctions: true
    global-require: "error"
    guard-for-in: "error"
    handle-callback-err: "error"
    id-blacklist: "error"
    id-match: "error"
    indent:
      - "error"
      - 4
    init-declarations: "error"
    key-spacing: "error"
    keyword-spacing: "error"
    line-comment-position: "off"
    linebreak-style:
      - "error"
      - "unix"
    lines-around-comment: "error"
    lines-between-class-members:
      - "error"
      - "always"
    max-len:
      - "error"
      - code: 100
        ignoreStrings: true
        ignoreUrls: true
    max-lines: "off"
    max-nested-callbacks: "error"
    max-params: "error"
    max-statements-per-line: "error"
    max-statements: "off"
    multiline-comment-style: "error"
    new-parens: "error"
    newline-per-chained-call:
      - "error"
      - ignoreChainWithDepth: 2
    no-alert: "error"
    no-array-constructor: "error"
    no-await-in-loop: "error"
    no-bitwise: "off"
    no-buffer-constructor: "error"
    no-caller: "error"
    no-confusing-arrow: "error"
    no-continue: "error"
    no-div-regex: "error"
    no-duplicate-imports: "error"
    no-else-return: "error"
    no-empty-function: "off"
    no-eq-null: "off"
    no-eval: "error"
    no-extend-native: "error"
    no-extra-bind: "error"
    no-extra-label: "error"
    no-extra-parens:
      - "error"
      - "all"
      - conditionalAssign: false
        nestedBinaryExpressions: false
        returnAssign: true
        enforceForArrowConditionals: true
    no-floating-decimal: "error"
    no-implicit-coercion: "error"
    no-implicit-globals: "error"
    no-implied-eval: "error"
    no-inline-comments: "off"
    no-inner-declarations:
      - "error"
      - "functions"
    no-invalid-this: "error"
    no-iterator: "error"
    no-label-var: "error"
    no-labels: "error"
    no-lone-blocks: "error"
    no-lonely-if: "error"
    no-loop-func: "error"
    no-magic-numbers: "off"
    no-mixed-operators: "error"
    no-mixed-requires:
      - "error"
      - grouping: true
        allowCall: true
    no-multi-assign: "error"
    no-multi-spaces: "error"
    no-multi-str: "error"
    no-multiple-empty-lines:
      - "error"
      - max: 2
        maxEOF: 1
        maxBOF: 0
    no-negated-condition: "error"
    no-negated-in-lhs: "error"
    no-nested-ternary: "error"
    no-new-func: "error"
    no-new-object: "error"
    no-new-require: "error"
    no-new-wrappers: "error"
    no-new: "error"
    no-octal-escape: "error"
    no-param-reassign: "error"
    no-path-concat: "error"
    no-plusplus:
      - "error"
      - allowForLoopAfterthoughts: true
    no-process-env: "error"
    no-process-exit: "error"
    no-proto: "error"
    no-prototype-builtins: "error"
    no-restricted-globals: "error"
    no-restricted-imports: "error"
    no-restricted-modules: "error"
    no-restricted-properties: "error"
    no-restricted-syntax: "error"
    no-return-assign: "error"
    no-return-await: "error"
    no-script-url: "error"
    no-self-compare: "error"
    no-sequences: "error"
    no-shadow-restricted-names: "error"
    no-shadow: "error"
    no-sync: "error"
    no-tabs: "error"
    no-template-curly-in-string: "error"
    no-ternary: "off"
    no-this-before-super: "error"
    no-throw-literal: "error"
    no-trailing-spaces: "error"
    no-undef-init: "error"
    no-undefined: "error"
    no-underscore-dangle: "off"
    no-unmodified-loop-condition: "error"
    no-unneeded-ternary: "error"
    no-unused-expressions: "error"
    no-use-before-define: "error"
    no-useless-call: "error"
    no-useless-computed-key: "error"
    no-useless-concat: "error"
    no-useless-constructor: "error"
    no-useless-rename: "error"
    no-useless-return: "error"
    no-var: "error"
    no-void: "error"
    no-warning-comments: "error"
    no-whitespace-before-property: "error"
    no-with: "error"
    nonblock-statement-body-position: "error"
    object-curly-newline:
      - "error"
      - multiline: true
        minProperties: 4
    object-curly-spacing: "error"
    object-property-newline: "error"
    object-shorthand: "off"
    one-var-declaration-per-line: "error"
    one-var:
      - "error"
      - "never"
    operator-assignment: "off"
    operator-linebreak: "error"
    padded-blocks: "off"
    padding-line-between-statements: "error"
    prefer-arrow-callback: "error"
    prefer-const: "error"
    prefer-destructuring: "error"
    prefer-numeric-literals: "error"
    prefer-object-spread: "error"
    prefer-promise-reject-errors: "error"
    prefer-reflect: "off"
    prefer-rest-params: "error"
    prefer-spread: "error"
    prefer-template: "error"
    quote-props:
      - "error"
      - "as-needed"
      - keywords: true
    radix: "error"
    require-await: "error"
    require-jsdoc: "off"
    rest-spread-spacing: "error"
    semi-spacing: "error"
    semi-style:
      - "error"
      - "last"
    semi: "error"
    sort-imports: "error"
    sort-keys: "off"
    sort-vars: "off"
    space-before-blocks: "error"
    space-before-function-paren:
      - "error"
      - anonymous: "always"
        named: "always"
        asyncArrow: "always"
    space-in-parens:
      - "error"
      - "never"
    space-infix-ops: "error"
    space-unary-ops: "error"
    spaced-comment:
      - "error"
      - "always"
    strict:
      - "error"
      - "never"
    switch-colon-spacing: "error"
    symbol-description: "error"
    template-curly-spacing: "error"
    template-tag-spacing: "error"
    valid-jsdoc: "error"
    vars-on-top: "off"
    wrap-iife: "error"
    wrap-regex: "error"
    yield-star-spacing: "error"
    yoda:
      - "error"
      - "never"
      - exceptRange: true
=======
env:
  browser: true
  node: true
globals:
  Uint8Array: true
  DataView: true
  Buffer: true
  TextDecoder: true

parserOptions:
  ecmaVersion: 6
  ecmaFeatures:
      scriptType: 'module'

extends: 'eslint:recommended'

rules:
  quotes: ['error', 'single']
  # Some changes for modernizing it/adding in 'best practices',
  # as well as code consistency based on existing stylistic choices
  #
  # see https://eslint.org/docs/rules/
  array-bracket-spacing: ['error', 'never']
  array-callback-return: 'error'
  array-element-newline: ['error', { multiline: true, minItems: 4 }]
  arrow-spacing: 'error'
  block-spacing: 'error'
  brace-style: ['error', '1tbs', { allowSingleLine: true }]
  callback-return: 'error'
  # camelcase: ['error', {ignoreDestructuring: true}] # this is disabled for now because of one variable and Idk if it can be renamed
  comma-dangle: ['error', 'never']
  comma-spacing: ['error', { before: false, after: true }]
  computed-property-spacing: ['error', 'never']
  consistent-return: 'error'
  eol-last: 'error'
  eqeqeq: ['error', 'smart']
  func-call-spacing: ['error', 'never']
  func-names: ['error', 'always']
  func-style: ['error', 'declaration', { allowArrowFunctions: true }]
  global-require: 'error'
  indent: ['error', 4]
  key-spacing: 'error'
  keyword-spacing: 'error'
  linebreak-style: ['error', 'unix']
  lines-between-class-members: ['error', 'always']
  max-len: ['error', {code: 100, ignoreStrings: true, ignoreUrls: true}] # this, especially, is highly subjective
  newline-per-chained-call: ['error', { ignoreChainWithDepth: 2 }]
  no-buffer-constructor: 'error' # https://eslint.org/docs/rules/no-buffer-constructor
  no-confusing-arrow: 'error'
  no-duplicate-imports: 'error'
  no-extra-parens: ['error', 'all', {nestedBinaryExpressions: true, enforceForArrowConditionals: true}]
  no-extra-semi: 'error'
  no-implicit-coercion: 'error'
  no-implicit-globals: 'error'
  no-lonely-if: 'error'
  no-mixed-requires: ['error', { grouping: true, allowCall: true }]
  no-multi-assign: 'error'
  no-multi-spaces: 'error'
  no-multiple-empty-lines: ['error', { max: 2, maxEOF: 1, maxBOF: 0}]
  no-new-require: 'error'
  no-param-reassign: 'error'
  no-plusplus: ['error', { allowForLoopAfterthoughts: true }]
  no-shadow: 'error'
  no-tabs: 'error'
  no-this-before-super: 'error'
  no-trailing-spaces: 'error'
  no-unneeded-ternary: 'error'
  no-use-before-define: 'error'
  no-useless-computed-key: 'error'
  no-useless-concat: 'error'
  no-useless-constructor: 'error'
  no-useless-rename: 'error'
  no-useless-return: 'error'	
  no-var: 'error'
  no-whitespace-before-property: 'error'
  object-curly-newline: ['error', { multiline: true, minProperties: 4 }]
  object-curly-spacing: ['error', 'always']
  one-var-declaration-per-line: ['error', 'always']
  one-var: ['error', 'never']
  padding-line-between-statements: ['error', { blankLine: 'always', prev: '*', next: 'return' }]
  prefer-arrow-callback: 'error'
  prefer-const: 'error'
  prefer-destructuring: 'error'
  prefer-object-spread: 'error'
  prefer-rest-params: 'error' 
  prefer-spread: 'error'
  prefer-template: 'error'
  quote-props: ['error', 'as-needed', { keywords: true }]
  semi-spacing: 'error'
  semi-style: ['error', 'last']
  semi: ['error', 'always']
  space-before-blocks: 'error'
  space-before-function-paren: ['error', {anonymous: 'always', named: 'always', asyncArrow: 'always'}]
  space-in-parens: ['error', 'never']
  space-infix-ops: ['error', {int32Hint: true}]
  space-unary-ops: 'error'
  spaced-comment: ['error', 'always']
  switch-colon-spacing: 'error'
  template-curly-spacing: ['error', 'never']
  yoda: ['error', 'never', {exceptRange: true}]
>>>>>>> 5bb62c1d1a734e6984e8a819be53f8cff29d73b4
